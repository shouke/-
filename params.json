{
  "name": "--数据结构",
  "tagline": "快速排序算法",
  "body": "### 快速排序算法的基本思想\r\n快速排序算发的基本思想是选择一个基准（一般是数组的第一个元素），然后给这个基准找一个合适的位置，使得数组分为两个部分，前一部分子数组都比该基准小，后一子数组都比该基准大，然后一迭代的方法对两个子数组再进行快速排序。通过递归实现全部排序。\r\n\r\nint quicksort(vector<int> &v, int left, int right){\r\n        if(left < right){\r\n                int key = v[left];\r\n                int low = left;\r\n                int high = right;\r\n                while(low < high){\r\n                        while(low < high && v[high] > key){\r\n                                high--;\r\n                        }\r\n                        if(low < high)\r\n                           v[low++] = v[high];\r\n                        while(low < high && v[low] < key){\r\n                                low++;\r\n                        }\r\n                        // 可能已经结束了, 赋值时候需要移位\r\n                        if(low < high)\r\n                           v[high--] = v[low];\r\n                }\r\n                v[low] = key;\r\n                quicksort(v,left,low-1);\r\n                quicksort(v,low+1,right);\r\n        }\r\n}\r\n### 接口改变的快速排序算法\r\n一般快速排序算法需要传三个参数int quicksort(vector<int> &v, int left, int right)，这里可以其实传递数组的头指针，与数组的的长度。具体的实现长度如下所示：\r\n#include <stdio.h>\r\n#include <string.h>\r\n#include <iostream>\r\n#include<vector>\r\nusing namespace std;\r\n\r\nvoid quicksort(int *data,int count)\r\n{\r\n\tint tmp=*data;\t\r\n\tint *p_start=data;\r\n\tint *p_end=(data+count-1);\r\n\tint *start=data;\r\n\tint *end=(data+count-1);\r\n\tint len1=0,len2=0;\r\n\tif(count<=1)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\twhile(start<end)\r\n\t{\r\n\t\twhile(start<end&&*end>tmp)\r\n\t\t{\r\n\t\t\tend--;\r\n\t\t}\r\n\t\tif(start<end)\r\n\t\t{\r\n\t\t\t*start++=*end;\r\n\t\t}\r\n\t\r\n\t\twhile(start<end&&*start<tmp)\r\n\t\t{\r\n\t\t\tstart++;\r\n\t\t}\r\n\t\tif(start<end)\r\n\t\t{\r\n\t\t\t*end--=*start;\t\t\r\n\t\t}\r\n\t\r\n\t}\r\n\t*start=tmp;\t\r\n\tlen1=start-data;\r\n\tlen2=p_end-start;\r\n\tquicksort(data,len1);\r\n\tquicksort(start+1,len2);\r\n}\r\n\r\nint main()\r\n{\r\n\r\nint a[10]={18,45,9,4,24,5,6,18,2,3};\r\nquicksort(a,10);\r\nfor(int i=0;i<10;i++)\r\ncout<<a[i]<<\" \"<<endl;\r\n}\r\n  第一次写博客，逻辑有点混乱，以后慢慢改。希望圈里的朋友多多指教，相互学习。\r\nWe’ve crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}